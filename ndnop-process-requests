#!/usr/bin/env python

import json
import os,sys,getopt
import urllib
import argparse

# pip install requests
# easy_install requests
# port install py27-requests
import requests

import subprocess
import base64
import ndn
import time
import datetime
import re

################################################################################
###                                CONFIG                                    ###
################################################################################

URL = "http://ndncert.named-data.net:5000"

################################################################################
################################################################################

class Signer(object):
    def __init__(self, site_prefix):
        self.site_prefix = site_prefix

    def run(self):
        query = \
            ndn.Name('/cert-requests/get') \
            .append(str(site_prefix)) \
            .append(str(int(time.mktime(time.gmtime()))))

        p = subprocess.Popen(["ndnop-tool", "sign"], 
                             stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        signature = p.communicate(query.toWire())

        query = query.append(signature[0])

        http_request = "%s/cert-requests/get/" % URL

        try:
            r = requests.post(http_request,
                              data={
                                  'keyLocator': str(site_prefix),
                                  'timestamp':  str(query[3]),
                                  'signature':  base64.b64encode(signature[0])
                                  })
        except:
            print "ERROR: error while communicating with the server"
            return
            
        if r.status_code != 200:
            print "ERROR: request not authorized or system is temporarily down"
            return

        cert_requests = r.json()

        for req in cert_requests:
            certData = ndn.Data.fromWire(base64.b64decode(req['cert_request']))

            print " >> Certificate request [%s] << " % certData.name[:-2]
            print "    Full Name:    [%s]" % sanitize(req['fullname'])
            print "    Organization: [%s]" % sanitize(req['organization'])
            print "    Email:        [%s]" % sanitize(req['email'])
            print "    Homepage:     [%s]" % sanitize(req['homeurl'])
            print "    Group:        [%s]" % sanitize(req['group'])
            print "    Advisor:      [%s]" % sanitize(req['advisor'])

            if confirm("Do you certify the above information?", resp=False):
                cert = self.issueCertificate(req)
                http_request = "%s/cert/submit/" % URL
                try:
                    r = requests.post(http_request,
                                      data={
                                          'data': cert
                                          })
                    if r.status_code != 200:
                        print "ERROR: certificate submission failed"
                        print r.text
                    else:
                        print "OK. Certificate has been issued"
                except:
                    print "ERROR: error while communicating with the server"

            else:
                print "will deny request"
                # denial(each);

    def issueCertificate(self, request):
        today = datetime.datetime.utcnow()

        not_before = (today - datetime.timedelta(days=1)  ).strftime('%Y%m%d%H%M%S')
        not_after  = (today + datetime.timedelta(days=365)).strftime('%Y%m%d%H%M%S')

        cmdline = ['ndn-certgen', 
                   '--not-before', not_before,
                   '--not-after',  not_after,
                   '--subject-name', sanitize(request['fullname']),
                   '--subject-info', ("%s '%s' " * 4 + "%s '%s'") %
                           (
                            '1.2.840.113549.1.9.1', sanitize(request['email']),
                            '2.5.4.11',             sanitize(request['organization']),
                            '2.5.4.1',              sanitize(request['group']),
                            '2.5.4.3',              sanitize(request['homeurl']),
                            '2.5.4.80',             sanitize(request['advisor'])
                            ),
                   '--sign-id', str(self.site_prefix),
                   '--request', '-']

        p = subprocess.Popen(cmdline, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        cert, err = p.communicate(request['cert_request'])
        return cert.rstrip()

def confirm(prompt, resp):
    if resp:
        prompt = '%s [%s]|%s: ' % (prompt, 'y', 'n')
    else:
        prompt = '%s [%s]|%s: ' % (prompt, 'n', 'y')
        
    while True:
        ans = raw_input(prompt)
        if not ans:
            return resp
        if ans not in ['y', 'Y', 'n', 'N']:
            print 'please enter y or n.'
            continue
        if ans == 'y' or ans == 'Y':
            return True
        if ans == 'n' or ans == 'N':
            return False

def sanitize(value):
    # Allow only a very limited set of characters as a value
    return re.sub(r'[^a-zA-Z0-9.,\-!@#$%&*()\\/<>{}[]\|:`~ ]', r'', value)

# def denial(_input):
#     _keyname = get_info(_input,"ndn-name");
#     _keyname = "/ndn/ucla.edu/philip/KSK-1380665656";
#     _keyname_split = _keyname.split('/');
#     _sign_id_split = _sign_id.split('/');
#     _keyname_new = "";
    
#     for i in range(1, len(_sign_id_split)):
#         if (_keyname_split[i] == _sign_id_split[i]):
#             _keyname_new += '/';
#             _keyname_new += _keyname_split[i];
#         else:
#             break;
#     _keyname_new += '/KEY';
#     for j in range(i+1,len(_keyname_split)):
#      	_keyname_new += '/';
#     	_keyname_new += _keyname_split[j];
    
#     _s = "./build/opt-tool nack " + _keyname_new + "  "+ _sign_id;
#     os.system(_s);

if __name__ == "__main__":
    site_prefix = ndn.Name(subprocess.check_output(["ndn-get-default", "-q"]))
    Signer(site_prefix).run()    
