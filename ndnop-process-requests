#!/usr/bin/env python

import json
import os,sys,getopt
import urllib
import argparse

# pip install requests
# easy_install requests
# port install py27-requests
import requests


import subprocess
import base64
import ndn
import time


################################################################################
###                                CONFIG                                    ###
################################################################################

URL = "http://ndncert.named-data.net:5000"

################################################################################
################################################################################

class Signer(object):
    def __init__(self, site_prefix):
        self.site_prefix = site_prefix

    def run(self):
        query = \
            ndn.Name('/cert-requests/get') \
            .append(str(site_prefix)) \
            .append(str(int(time.mktime (time.gmtime()))))

        p = subprocess.Popen(["ndnop-tool", "sign"], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        signature = p.communicate(query.toWire())

        query = query.append(signature)
        http_request = "%s%s" % (URL, str(query))

        try:
            r = requests.get(http_request)
        except:
            print "ERROR: error while communicating with the server"
            return
            
        if r.status_code != 200:
            print "ERROR: request not authorized or system is temporarily down"
            return

        cert_requests = r.json()

        for req in cert_requests:
            certData = ndn.Data.fromWire(base64.b64decode(req['cert-request']))

            print " >> Certificate request [%s] << " % certData.name[:-2]
            print "    Full Name:    %s" % req['fullname']
            print "    Organization: %s" % req['organization']
            print "    Email:        %s" % req['email']
            print "    Homepage:     %s" % req['homepage']
            print "    Group:        %s" % req['group']
            print "    Advisor:      %s" % req['advisor']

            if confirm("Do you certify the above information?", resp=False):
                print "will issue certificate"
                # issue(each);
            else:
                print "will deny request"
                # denial(each);

                
def confirm(prompt, resp):
    if resp:
        prompt = '%s [%s]|%s: ' % (prompt, 'y', 'n')
    else:
        prompt = '%s [%s]|%s: ' % (prompt, 'n', 'y')
        
    while True:
        ans = raw_input(prompt)
        if not ans:
            return resp
        if ans not in ['y', 'Y', 'n', 'N']:
            print 'please enter y or n.'
            continue
        if ans == 'y' or ans == 'Y':
            return True
        if ans == 'n' or ans == 'N':
            return False
                
# def denial(_input):
#     _keyname = get_info(_input,"ndn-name");
#     _keyname = "/ndn/ucla.edu/philip/KSK-1380665656";
#     _keyname_split = _keyname.split('/');
#     _sign_id_split = _sign_id.split('/');
#     _keyname_new = "";
    
#     for i in range(1, len(_sign_id_split)):
#         if (_keyname_split[i] == _sign_id_split[i]):
#             _keyname_new += '/';
#             _keyname_new += _keyname_split[i];
#         else:
#             break;
#     _keyname_new += '/KEY';
#     for j in range(i+1,len(_keyname_split)):
#      	_keyname_new += '/';
#     	_keyname_new += _keyname_split[j];
    
#     _s = "./build/opt-tool nack " + _keyname_new + "  "+ _sign_id;
#     os.system(_s);

# def issue(_input):
#     _key =  get_info(_input,"key");
#     _email = get_info(_input,"email");
#     _keyname = get_info(_input,"ndn-name");
    
#     _keyname_split = _keyname.split('/');
#     _sign_id_split = _sign_id.split('/');
#     _keyname_new = "";

#     for i in range(1, len(_sign_id_split)):
#         if (_keyname_split[i] == _sign_id_split[i]):
#             _keyname_new += '/';
#             _keyname_new += _keyname_split[i];
#         else:
#             break;
            
#         _keyname_new += '/KEY';
#         for j in range(i+1,len(_keyname_split)):
#          	_keyname_new += '/';
#        		_keyname_new += _keyname_split[j];
                

#         _start = '19900209111111';
#         _end = '20131111111111';
#         _given_name = "aa";
#         _surname = "bb";
#         _org_name = "ucla";
#         _email = "maxy12@cs.ucla.edu"
#         _group_name = "irl";
#         _advisor_name = "lixia zhang";
#         _homepage = "www.ucla.edu/cs/xingyu";
#         _subject = " 2.5.4.11 "+ _org_name + " 2.5.4.10 "+ _group_name + " 2.5.4.42 "+_given_name + " 2.5.4.4 "+ _surname + " 1.2.840.113549.1.9.1 " + _email + " 2.5.4.80 " + _advisor_name + " 2.5.4.3 " + _homepage ;

# 	_s = "./build/ndn-certgen-opt -n " +_keyname_new+ " -S "+_start +" -E " + _end + " -N " + _subject + " -k " +_key+" -s " + _sign_id;
#         print _s
# 	os.system(_s);
# 	list = os.listdir(".");
# 	array = "";
# 	_keyname_tran = nameTransform(_keyname_new);
# 	print _keyname_tran
# 	for line in list:
# 		if (line.find(_keyname_tran)>=0):
# 			print line
# 			publish_command = "ndnputfile " + _keyname_new + " " + line;
#                         print publish_command
#                         #			os.system(publish_command);    	       
#                         ret = os.popen(command).read();
# 			ins = open( line, "r" );
# 			for tt in ins:
# 				if (tt.find("---")==0):
# 					continue;
# 				array += tt[0:len(tt)-1];
# 			break;

if __name__ == "__main__":
    site_prefix = ndn.Name(subprocess.check_output(["ndn-get-default"]))
    Signer(site_prefix).run()    
